openapi: 3.0.3
info:
  title: Dopravní průzkum ulic
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
tags:
  - name: map
    description: Getting data for map purposes
  - name: upload
    description: API for data from application
  - name: user
    description: User manipulation
paths:
  /map:
    get:
      tags:
        - map
      summary: Get map
      operationId: getMap
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Invalid input
  /upload/points:
    post:
      tags:
        - upload
      summary: Upload only points
      operationId: postPoints
      requestBody:
        description: Array of points
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Point'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'       
        '400':
          description: Invalid input
  /upload/streets:
    post:
      tags:
        - upload
      summary: Upload only streets
      operationId: postStreets
      requestBody:
        description: Array of streets
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Street'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'       
        '400':
          description: Invalid input 
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{userId}/upload:
    post:
      tags:
        - user
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Point:
      type: object
      properties:
        id:
          type: integer
          format: int32
        session:
          type: integer
          format: int32
        ts:
          type: integer
          format: int64
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        noise:
          type: number
          format: float
        part:
          type: integer
          format: int32
    Street:
      type: object
      properties:
        id:
          type: integer
          format: int32
        session:
          type: integer
          format: int32
        from:
          type: integer
          format: int32
        to:
          type: integer
          format: int32
        sidewalk:
          type: integer
          format: int32
        sidewalk_width:
          type: integer
          format: int32
        green:
          type: integer
          format: int32
        comfort:
          type: integer
          format: int32
        isInput:
          type: boolean
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
